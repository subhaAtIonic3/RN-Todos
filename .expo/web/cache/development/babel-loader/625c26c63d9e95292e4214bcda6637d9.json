{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/subhrajyotichakraborty/Desktop/Work_Personal/JS/todos/src/screens/ColorMeter.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ColorPalette from \"../components/ColorPalette/ColorPalette\";\n\nvar ColorMeter = function (_Component) {\n  _inherits(ColorMeter, _Component);\n\n  var _super = _createSuper(ColorMeter);\n\n  function ColorMeter(props) {\n    var _this;\n\n    _classCallCheck(this, ColorMeter);\n\n    _this = _super.call(this, props);\n\n    _this.selectColorPalette = function (colorName) {\n      var updatedColorArray = _toConsumableArray(_this.state.colorPalettes);\n\n      updatedColorArray.map(function (colorObj) {\n        if (colorObj.name === colorName) {\n          colorObj.isSelected = !colorObj.isSelected;\n        } else {\n          colorObj.isSelected = false;\n        }\n      });\n\n      _this.setState({\n        colorPalettes: updatedColorArray\n      });\n\n      _this.selectedColorPalette();\n    };\n\n    _this.selectedColorPalette = function () {\n      var selectColor = _this.state.colorPalettes.find(function (colorObj) {\n        return colorObj.isSelected;\n      });\n\n      if (selectColor) {\n        _this.props.getSelectedColorPalette && _this.props.getSelectedColorPalette(selectColor.name);\n      }\n    };\n\n    _this.state = {\n      colorPalettes: [{\n        name: \"green\",\n        isSelected: false\n      }, {\n        name: \"red\",\n        isSelected: false\n      }, {\n        name: \"blue\",\n        isSelected: false\n      }, {\n        name: \"black\",\n        isSelected: false\n      }, {\n        name: \"orange\",\n        isSelected: false\n      }]\n    };\n    return _this;\n  }\n\n  _createClass(ColorMeter, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var colorPalettesElement = this.state.colorPalettes.map(function (_ref) {\n        var name = _ref.name,\n            isSelected = _ref.isSelected;\n        return React.createElement(TouchableOpacity, {\n          key: name,\n          onPress: function onPress() {\n            return _this2.selectColorPalette(name);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 9\n          }\n        }, React.createElement(ColorPalette, {\n          color: name,\n          isSelected: isSelected,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 11\n          }\n        }));\n      });\n      return React.createElement(View, {\n        style: styles.selectColorContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: styles.chooseColorLabel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }\n      }, \"Choose Color\"), React.createElement(View, {\n        style: styles.colorsContainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 9\n        }\n      }, colorPalettesElement));\n    }\n  }]);\n\n  return ColorMeter;\n}(Component);\n\nvar styles = StyleSheet.create({\n  selectColorContainer: {},\n  chooseColorLabel: {\n    fontSize: 18,\n    fontWeight: 'bold'\n  },\n  colorsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginVertical: 15\n  }\n});\nexport default ColorMeter;","map":{"version":3,"sources":["/Users/subhrajyotichakraborty/Desktop/Work_Personal/JS/todos/src/screens/ColorMeter.js"],"names":["React","Component","ColorPalette","ColorMeter","props","selectColorPalette","colorName","updatedColorArray","state","colorPalettes","map","colorObj","name","isSelected","setState","selectedColorPalette","selectColor","find","getSelectedColorPalette","colorPalettesElement","styles","selectColorContainer","chooseColorLabel","colorsContainer","StyleSheet","create","fontSize","fontWeight","flexDirection","justifyContent","marginVertical"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {View, Text, StyleSheet, TouchableOpacity} from 'react-native';\n\nimport ColorPalette from '../components/ColorPalette/ColorPalette';\n\nclass ColorMeter extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      colorPalettes: [\n        {\n          name: \"green\",\n          isSelected: false\n        },\n        {\n          name: \"red\",\n          isSelected: false\n        },\n        {\n          name: \"blue\",\n          isSelected: false\n        }, {\n          name: \"black\",\n          isSelected: false\n        }, {\n          name: \"orange\",\n          isSelected: false\n        }\n      ]\n    }\n  }\n\n  selectColorPalette = (colorName) => {\n    const updatedColorArray = [...this.state.colorPalettes];\n    updatedColorArray.map((colorObj) => {\n      if (colorObj.name === colorName) {\n        colorObj.isSelected = !colorObj.isSelected;\n      } else {\n        colorObj.isSelected = false\n      }\n    });\n    this.setState({\n      colorPalettes: updatedColorArray\n    });\n    this.selectedColorPalette();\n  }\n\n  selectedColorPalette = () => {\n    const selectColor = this.state.colorPalettes.find((colorObj) => colorObj.isSelected);\n    if (selectColor) {\n      this.props.getSelectedColorPalette && this.props.getSelectedColorPalette(selectColor.name);\n    }\n  }\n\n  render() {\n\n    const colorPalettesElement = (this.state.colorPalettes.map(({ name, isSelected }) => {\n      return(\n        <TouchableOpacity key={name} onPress={() => this.selectColorPalette(name)}>\n          <ColorPalette color={name} isSelected={isSelected} />\n        </TouchableOpacity>\n      )\n    }));\n\n    return (\n      <View style={styles.selectColorContainer}>\n        <Text style={styles.chooseColorLabel}>Choose Color</Text>\n        <View style={styles.colorsContainer}>\n          {colorPalettesElement}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  selectColorContainer: {},\n  chooseColorLabel: {\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  colorsContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginVertical: 15,\n  },\n});\n\nexport default ColorMeter;\n"]},"metadata":{},"sourceType":"module"}